import Categories
import Tokens

class Lexer:
    def __init__(self,text):
        self.text = text
        self.index = -1
        self.current_char = None
        self.next()

    def next(self):
        self.index += 1
        self.current_char = self.text[self.index] if self.index < len(self.text) else "EOF"

    def peek(self,how_far=1,look_for=None):
        # check existence and content of index-n
        if not look_for:
            return self.text[self.index + how_far]
        else:
            return self.text[self.index + how_far] and self.text[self.index + how_far] == look_for

    def get_next_char(self):
        # find next non-blank and peek it
        n = 0
        while self.text[self.index + n] in Categories.BLANKS:
            n += 1
        return n

    def make__tokens(self):
        tokens = []

        while self.current_char:
            # ignore blanks
            if self.current_char in Categories.BLANKS:
                self.next()
            # numbers 1 2 3 4 5 6 7 8 9 0 .
            elif self.current_char in Categories.DIGITS + '.' + '-':
                if self.current_char == '-':
                    if self.peek() in Categories.DIGITS + '.':
                        self.next()
                        tokens.append(self.make_number(True))
                    else:
                        tokens.append(Tokens.OperatorToken('SUB','-'))
                        self.next()
                elif self.current_char in Categories.DIGITS + '.':
                    tokens.append(self.make_number())
                    # self.next()
            # EOF
            elif self.current_char == 'EOF':
                break
            # unknown character
            else:
                return f'Error: unknown character, {self.current_char}'

        return tokens

    def make_tokens(self):
        tokens = []

        while self.current_char:
            # ignore blanks
            if self.current_char in Categories.BLANKS:
                self.next()
            # numbers 1 2 3 4 5 6 7 8 9 0 .
            elif self.current_char in Categories.DIGITS + '.' + '-':
                if self.current_char == '-':
                    if self.peek() in Categories.DIGITS + '.':
                        self.next()
                        tokens.append(self.make_number(True))
                    else:
                        tokens.append(Tokens.OperatorToken('SUB','-'))
                        self.next()
                elif self.current_char in Categories.DIGITS + '.':
                    tokens.append(self.make_number())
                    # self.next()
            # words (keywords, constants, variables)
            elif self.current_char in Categories.LETTERS:
                tokens.append(Tokens.Token(*self.make_word()))
            # operators + - * ** / // ///
            elif self.current_char in Categories.OPERATORS:
                tokens.append(Tokens.OperatorToken(*self.make_operator()))
            # brackets ( ) [ ]
            elif self.current_char in Categories.BRACKETS:
                tokens.append(Tokens.BracketToken(Categories.BRACKETS[self.current_char],self.current_char))
                self.next()
            # comparatives > >= < <= = !=
            elif self.current_char in '><!=':
                tokens.append(Tokens.ComparativeToken(*self.make_comparative()))
            # EOF
            elif self.current_char == 'EOF':
                break
            # unknown character
            else:
                return f'Error: unknown character, {self.current_char}'

        return tokens

    def make_number(self,negative=False):
        num_str = self.current_char
        decimal_count = 1 if self.current_char == '.' else 0
        self.next()

        while self.current_char in Categories.DIGITS + '.':
            if self.current_char == '.':
                if decimal_count == 1:
                    return 'Error: Too many decimals'
                decimal_count += 1
            num_str += self.current_char
            self.next()

        # no leading decimals
        if num_str.startswith('.'):
            num_str = '0' + num_str

        # no trailing decimals
        if num_str.endswith('.'):
            num_str += '0'

        # no leading zeroes
        if decimal_count == 0:
            if num_str.startswith('0'):
                while num_str.startswith('0'):
                    num_str = num_str[1:]

        # add - if negative
        if negative:
            num_str = '-' + num_str
        return Tokens.FloatToken(num_str) if decimal_count else Tokens.IntegerToken(num_str)

    def make_operator(self):
        # + - / *
        op_str = self.current_char

        if self.peek(self.get_next_char()) in Categories.DIGITS + '.':
            self.next()
            return self.make_number()
        # ** //
        elif self.peek() == op_str[-1]:
            self.next()
            op_str += self.current_char
            # ///
            if self.peek() == op_str[-1]:
                self.next()
                op_str += self.current_char
        self.next()
        return Categories.OPERATORS[op_str], op_str

    def make_word(self):
        word_str = self.current_char
        self.next()

        while self.current_char in Categories.LETTERS + '_':
            word_str += self.current_char
            self.next()

        return 'KEY' if word_str in Categories.KEYWORDS else 'MATH' if word_str in Categories.MATH else 'VAR', word_str

    def make_comparative(self):
        comp_str = self.current_char

        if comp_str in {'>','<','!'}:
            # ! error
            if comp_str == '!' and self.peek() != '=':
                return 'Error: "!" needs a following "="'
            # >= <= !=
            if self.peek(look_for='='):
                self.next()
                comp_str += self.current_char
            self.next()
        elif comp_str == '=':
            self.next()

        return Categories.COMPARATIVES[comp_str], comp_str


def token_test():
    to_test = {
        # 'OP': '+ - * ** / // ///',
        # 'INT': '1 -1 01 -01 10 -10',
        # 'FLT':'. -. .1 1. 1.1 -1.',
        # 'CMPR':'> >= < <= != =',
        # 'BRKT':'( ) [ ]',
        # 'CMBO':'2.5**4///(7.66)+1--1',
        # 'KEY':'is set del test',
        # 'a':'test[(2 * 3)-1 >= 1.44 ** 3][2 + 2][3 + 3]',
        # 'b':'test[(2 * 3)- 1 >= 1.44 ** 3][2 + 2][3 + 3]',
        # 'c':'test[(2 * 3)--1 >= 1.44 ** 3][2 + 2][3 + 3]',
        # 'test':'1- 1--1 - 1- 1',
        # 'd':'2>-1',
    }
    for _set_ in to_test:
        to_show = f"| {_set_}{' '*(5-len(_set_))}: "
        lexer = Lexer(to_test[_set_])

        for i in lexer.make_tokens():
            to_show += f"{i.type}:{i.value}, "
        to_show = to_show.strip(', ') # remove final comma
        print(to_show)
token_test()

# TODO: - 1 -> sub 1 but -1 -> neg 1. How to fix?
