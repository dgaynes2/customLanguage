# custom
from Lexer import Lexer
import Tokens
import Errors

# libraries
import math

IMMUTABLES = {'pi':math.pi,'e':math.e,'dbday':'3.24','mbday':'1.22'}
# global dictionary for storing assigned variables
VARIABLES = IMMUTABLES.copy()

class Parser:
    def __init__(self,tokens):
        self.tokens = tokens
        self.index = -1
        self.current_token = None
        self.next()

        # track ( and ) characters for syntax error
        self.parentheses_tracker = 0

    def next(self):
        self.index += 1
        self.current_token = self.tokens[self.index] if self.index < len(self.tokens) else None

    ##### SUGAR #####

    def apply_operation(self,result,op,operand):
        # Apply binary operation based on given operator
        assert operand is not None, 'Operand cannot be None'
        if type(operand) in [int,float]:
            if op == 'ADD': # +
                return result + operand
            elif op == 'SUB': # -
                return result - operand
            elif op == 'MUL': # *
                return result * operand
            elif op == 'DIV': # /
                if operand != 0:
                    return result / operand
                return Errors.DivideByZeroError()
            elif op == 'FLD': # //
                if operand != 0:
                    return result // operand
                return Errors.DivideByZeroError()
            elif op == 'MOD': # %
                if operand != 0:
                    return result % operand
                return Errors.DivideByZeroError()
            else:
                return Errors.InvalidTextError('operator',op)
        else:
            return Errors.InvalidTextError('operand',operand)

    def apply_comparison(self,result,op,operand):
        # Apply comparison operations based on the given operator
        assert operand is not None, 'Operand cannot be None'
        if op == 'GT':    # >
            return result > operand
        elif op == 'LT':  # <
            return result < operand
        elif op == 'GEQ': # >=
            return result >= operand
        elif op == 'LEQ': # <=
            return result <= operand
        elif op == 'NEQ': # !=
            return result != operand
        elif op == 'EQ':  # =
            return result == operand

    def apply_math(self,result,op):
        match op:
            case 'CLG': return math.ceil(result)
            case 'FLR': return math.floor(result)
            case 'INT': return int(result)
            case 'FLT': return float(result)
            case 'RND': return round(result)
            case 'SQRT':return math.sqrt(result)
            case 'FAC': return math.factorial(result)
            case 'LOG': return math.log(result)
            case 'ABS': return math.fabs(result)
            case 'SIN': return math.sin(result)
            case 'COS': return math.cos(result)
            case 'TAN': return math.tan(result)

    ##### CONDITIONAL STATEMENTS #####

    def if_statement(self):
        # if statement
        if self.current_token.type == 'LS':
            self.next()
            if_result = self.parse_expression()
            if self.current_token.type == 'RS':
                self.next()
            else:
                return Errors.MismatchedBracketsError(']')
        else:
            return Errors.MismatchedBracketsError('[')

        # if statement TRUE
        if self.current_token.type == 'LS':
            self.next()
            then_result = self.if_var_expr()
            if self.current_token.type == 'RS':
                self.next()
            else:
                return Errors.MismatchedBracketsError(']')
        else:
            return Errors.MismatchedBracketsError('[')

        # if statement FALSE
        if self.current_token.type == 'LS':
            self.next()
            else_result = self.if_var_expr()
            if self.current_token.type == 'RS':
                self.next()
            else:
                return Errors.MismatchedBracketsError(']')
        else:
            else_result = None

        return then_result if if_result else else_result

    ##### INTERPRETING #####

    def parse(self):
        return self.check_parentheses_pairs()

    def check_parentheses_pairs(self):
        # track number of ( and ) characters. Different count -> error
        for token in self.tokens:
            if token.type == 'LP': # (
                self.parentheses_tracker += 1
            elif token.type == 'RP': # )
                self.parentheses_tracker -= 1
        # too many )
        if self.parentheses_tracker > 0:
            result = Errors.MismatchedParenthesesError(self.parentheses_tracker,')')
        # too many (
        elif self.parentheses_tracker < 0:
            result = Errors.MismatchedParenthesesError(abs(self.parentheses_tracker),'(')
        # continue parsing if balanced parentheses
        else:
            result = self.if_var_expr()
        return result

    def if_var_expr(self):
        if self.current_token.type == 'KEY':
            # is input an if-statement  "test[if][yes][no] all [] required"
            if self.current_token.value == 'test':
                self.next()
                return self.if_statement()

            # set variable  "set var_name is value"
            elif self.current_token.value == 'set':
                return self.parse_variables()

            # use built-in math statement
            elif self.current_token.type == 'MATH':
                return self.apply_math(self.parse_expression(),self.current_token.value)
        return self.parse_expression()

    def parse_variables(self):
        self.next()
        if self.current_token.value in IMMUTABLES:
            return Errors.ImmutableVariableError()
        token = self.current_token
        if token.type == 'VAR':
            variable_name = token.value
            self.next()
            if self.current_token and self.current_token.value == 'is':
                self.next()
                VARIABLES[variable_name] = self.parse_expression()
                return Errors.SetVariableMessage(variable_name,VARIABLES[variable_name])
            return Errors.InvalidSyntaxError("Error: use syntax 'set var_name is value' to set variable")
        return Errors.InvalidVariableAssignmentError()

    def parse_expression(self):
        result = self.parse_term()

        while self.current_token and self.current_token.type in {'ADD','SUB','MATH'}:
            # addition
            if self.current_token.type == 'ADD':
                self.next()
                term = self.parse_term()
                if isinstance(term,Errors.UnexpectedTokenError):
                    return term
                result += term
            # subtraction
            elif self.current_token.type == 'SUB':
                self.next()
                term = self.parse_term()
                if isinstance(term,Errors.UnexpectedTokenError):
                    return term
                result -= term
            # funky math
            elif self.current_token.type == 'MATH':
                result = self.apply_math(result,self.current_token.value)
                self.next()
            else:
                break

        # comparison operators
        while self.current_token and self.current_token.type in {'GT', 'LT', 'GEQ', 'LEQ', 'EQ', 'NEQ'}:
            op = self.current_token.type
            self.next()
            operand = self.parse_term()
            result = self.apply_comparison(result,op,operand)

        return result

    def parse_term(self):
        result = self.parse_exponent()

        # multiplication, divisions
        while self.current_token and self.current_token.type in {'MUL','DIV','FLD','MOD'}:
            op = self.current_token.type
            self.next()
            operand = self.parse_exponent()
            result = self.apply_operation(result,op,operand)

        return result

    def parse_exponent(self):
        result = self.parse_factor()

        while self.current_token and self.current_token.type == 'POW':
            self.next()
            factor = self.parse_factor()
            if not isinstance(result,(int,float)) or not isinstance(factor,(int,float)):
                return Errors.ExponentError()
            result **= factor

        return result

    def parse_factor(self):
        token = self.current_token
        # get variable value from VARIABLES dict
        if token.type == 'VAR':
            self.next()
            if token.value in VARIABLES:
                return VARIABLES[token.value]
            return Errors.InvalidVariableError(token.value)

        # integer or float
        elif isinstance(token,(Tokens.FloatToken,Tokens.IntegerToken)):
            self.next()
            return float(token.value) if '.' in token.value else int(token.value)

        # restart interpreter chain if current token is (
        elif isinstance(token,Tokens.BracketToken) and token.type == 'LP':
            self.next()
            result = self.parse_expression()
            self.next()
            return result

        # funky math
        elif token.type == 'MATH':
            self.next()
            return self.apply_math(self.parse_expression(),token.value)
        else:
            return Errors.UnexpectedTokenError(token.value)


def main():
    run = True
    while run:
        line = input('> ')
        if line.strip() == '':
            continue
        elif line.lower() in {'exit','quit'}:
            run = False
        elif line.strip().lower() == 'vardict':
            print(VARIABLES)
        elif line.lower().startswith('cleardict'):
            VARIABLES.clear()
            print('All variables deleted')
        elif line.lower().startswith('del'):
            lexer = Lexer(line[3:])
            tokens = lexer.make_tokens()
            if len(tokens) > 0:
                if tokens[0].type == 'VAR':
                    if tokens[0].value in VARIABLES:
                        VARIABLES.pop(tokens[0].value)
                        print(Errors.VariableDeletedMessage(tokens[0].value))
                    else:
                        print(f'Variable "{tokens[0].value}" not found')
                else:
                    print(Errors.VariableNotFoundError(tokens[0].value))
            else:
                print(Errors.DelSyntaxError())
        else:
            lexer = Lexer(line)
            tokens = lexer.make_tokens()
            parser = Parser(tokens)
            result = parser.check_parentheses_pairs()
            print(result)

if __name__ == '__main__':
    main()

## 32850.399999999994 ##
# print((10%3)*4**(35//4)/2+100.2-17.8)
# (10///3)*4**(35//4)/2+100.2-17.8

# test[2>-2][set pos is 1][set neg is -1]
